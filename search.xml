<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[微机原理复习]]></title>
    <url>%2F2018%2F06%2F22%2F%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[第一章：1.冯诺依曼设计思想以二进制表示指令和数据程序和数据事先存放在存储器中，计算机在工作时可高速从存储器中取出指令加以执行。 由运算器、控制器、存储器、输入设备、输出设备组成计算机硬件系统。其特点：数据和指令存放在一起。（哈弗结构特点：数据和指令分开存放）2.总线的含义、组成（AD DB CB） 3.微处理器： 运算器、控制器、内部寄存器、 内部寄存器：程序计数器、地址寄存器、数据缓冲寄存器、累加器、标志寄存器、寄存器阵列、4.内存操作 P8 第二章：1.进制转化 2-&gt;10-&gt;16 例子：13.75D = 1101.11B = C.3H2.原码 补码 反码 P203.溢出 P254.ASCII字符编码表 P29 第三章：1.8086/8088数据线16根，地址线20根；寻址范围：2的20次方即1M2.8086/8088：8个通用寄存器：AX BX CX DX SP BP SI DI4个段寄存器：CS DS SS ES P402个控制寄存器：IP FLAGS P413.8086/8088CPU基本的总线周期由四个时钟周期组成。4.逻辑地址形成 20 位物理地址的方法 ， 例 （ CS ） X 10 H + IP5.00001H单元中的内容为9FH，记为（00001H）= 9FH6.使用堆栈的目的：（1）存放指令操作数（变量）。 P53 （2）保护断点和现场。 在进出栈时，段地址由堆栈段寄存器（SS）提供，段内偏移地址由堆栈指针寄存器（SP）提供，SP始终指向栈顶，当堆栈为空时，SP指向栈底。 第四章：1.数据寻址方式 P92(1)立即数寻址 MOV BL，80H(2)寄存器寻址 MOV CL，DL(3)存储器寻址 &gt;直接寻址 MOV AL,[1064H] &gt;寄存器间接寻址 MOV AX,[SI] MOV [BX],AL MOV ES:[DI],AX &gt;寄存器相对寻址 MOV [SI+10H],AX MOV CX,[BX+COUNT] &gt;基址变址寻址 MOV [BX+DI],AX MOV AH,[BP][SI] &gt;基址变址相对寻址 MOV AH,[BX+DI+1234H] MOV AH,[BP][SI+1234H](4)I/O寻址 &gt;端口直接寻址 IN AL,21H &gt;端口间接寻址 MOV DX,120H OUT DX,AX2.地址寻址方式(程序执行顺序由CS和IP内容决定) 定义：找出程序转移的地址(1)段内直接寻址 JMP NEAR PTR PROGIA JMP SHORT QUEST(2)段内间接寻址 JMP BX JMP WORD PTR [BP+TABLE](3)段间直接寻址 JMP FAR PTR NEXTROUTINT JMP LABEL_NAME(4)段间间接寻址 JMP DWORD PTR [BP][DI]3.常见指令 P102 一条MOV不能做的事儿4.P160、第四题 (1)(DS) X 10H + (BX) (2)(DS) X 10H + (BX)+(SI)+(1000H) (3)(DS) X 10H + (BX）+(SI) (4)(ES) X 10H + (BX) 第五章：1.在计算机上进行汇编语言程序设计的步骤 编写.asm源代码、用汇编程序MASM将.asm文件会变成.obj文件、用LINK程序将.obj文件链接成.exe文件、在DOS命令行直接键入文件名执行该文件、 第六章：1.芯片容量 P222 第一段2.存储器芯片扩展(位扩展、字扩展、字位同时扩展) &gt; 例:若使用1 X k位存储器芯片构成容量为M X N 位的存储器,需要(M/1 + N/k)个这种芯片。3.表6.8 EPROM芯片地址范围 P2424.芯片容量为1024 X 8位时，地址线:10根 (2的10次方=1024), 数据线:8根 第七章：1.输入/输出（I/O）:主机和外界交换信息，I/O接口：介于主机和外设之间的一种缓冲电路。2.端口 ！= 接口 I/O操作所用的地址总是对端口而言；若干接口加上相应的控制电路才构成接口。3.CPU与外设之间数据传送方式 (1)程序传送方式无条件传送查询传送方式(流程:1.CPU从接口读取状态字 2.CPU检测相应状态位是否满足就绪条件3.不满足重复1 2，满足,就传送数据) (2)中断传送 (3)直接存储器存取传送（DMA）4.中断处理过程 中断请求、中断响应、保护断点、中断处理、中断返回5.8086/8088中断源优先级（高-&gt;低） 软件中断、非屏蔽中断、可屏蔽中断、单步中断6.中断向量表 P246 感觉这个挺重要的，可是很难记住7.P280 题14 其功能：根据中断类型号存储相应的中断服务程序入口地址。 CPU利用中断向量表转入中断服务的过程： 由中断类型号n乘以4获得中断向量在中断向量表中的起始位置，然后把存储在低地址(4n，4n+1)两单元的中断服务程序的入口偏移地址置入IP寄存器中，再把两个高地址（4n+2,4n+3）的内容置入CS寄存器，于是跳转到中断服务程序。 第八章：1.P295 表8.3 8255A各端口读/写操作时的信号关系2.P297 8255A 工作方式与控制字 8255A试卷上应该会点到。]]></content>
      <tags>
        <tag>复习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[arduino_error]]></title>
    <url>%2F2018%2F06%2F05%2Farduino%2Farduino-error%2F</url>
    <content type="text"><![CDATA[arduino_error 报错信息:Arduino:1.8.5 (Linux) , 开发板：&quot;Arduino/Genuino Uno&quot; 项目使用了 5976 字节，占用了 (18%) 程序存储空间。最大为 32256 字节。 全局变量使用了282字节，(13%) 的动态内存，余留1766字节局部变量。最大为2048字节。 avrdude: stk500_recv() : programmer is not responding avrdude: stk500_getsync() attempt 1 of 10: not in sync: resp=0x00 avrdude: stk500_recv() : programmer is not responding avrdude: stk500_getsync() attempt 2 of 10: not in sync: resp=0x00 avrdude: stk500_recv() : programmer is not responding avrdude: stk500_getsync() attempt 3 of 10: not in sync: resp=0x00 ...... 解决:在上传编译好的程序之前,要首先将供给电源断开.]]></content>
      <categories>
        <category>那些年踩到的arduino坑</category>
      </categories>
      <tags>
        <tag>arduino</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django部署笔记]]></title>
    <url>%2F2018%2F03%2F24%2FDjango%2FDjango%E9%83%A8%E7%BD%B2%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[部署成功经验教训:1.在mynewsite的settings.py文件中,添加网址到ALLOWED_HOSTS列表中.2.使用命令ip a所查到的ip地址,不能使用127.0.0.1….3.在某云服务器(Centos)上, import sqlite3出现错误时,首先确认安装 了sqlite3, (没有的话 yum -y install sqlite-devel), 然后找到py thon3的目录(find / -name python3), 进入它的目录中, 执行./conf igure, 然后make, 在make install, 一般就可以解决了.]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[c课程设计文件读写参考]]></title>
    <url>%2F2018%2F03%2F06%2FC%2Fc%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%8F%82%E8%80%83%2F</url>
    <content type="text"></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>c文件读写</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python.TypeError:]]></title>
    <url>%2F2018%2F02%2F13%2Fpython%2Ferror%2Fpython-TypeError-run-missing-1-required-positional-argument-self%2F</url>
    <content type="text"><![CDATA[run() missing 1 required positional argument: self 源代码:12345678910111213141516171819202122232425#!/usr/bin/env python3#coding: utf-8class Animal(object): def run(self): print("Animal is running...")class Dog(Animal): def run(self): print("Dog is running...")def run_twice(animal): animal.run() animal.run()run_twice(Animal())run_twice(Dog())class Tortolse(Animal): def run(self): print("Tortolse is running slowly...")run_twice(Tortolse) bug反馈如图: 问题解决:在查询网上资料,又返回来重写代码后,发现是自己在最后一行的Tortolse后面少了一个圆括号,泪…,加上后就可以运行了.]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python error</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库MariaDB---外键约束]]></title>
    <url>%2F2018%2F02%2F01%2F%E6%95%B0%E6%8D%AE%E5%BA%93%2F%E6%95%B0%E6%8D%AE%E5%BA%93MariaDB-%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F%2F</url>
    <content type="text"><![CDATA[使用外键约束注意问题:1.书中常提到的是: 子表的外键必须关联父表的主键,且关联字段的数据类型必须匹配,如果类型不一样,则创建子表时,就会出现错误”ERROR 1005 (HY000): Can’t create table ‘database.tablename’(error: 150)”.2.在使用中,遇到创建失败,但确认类型匹配,后经查找搜索后,发现要相互关联的两表的存储引擎还需一致才行,不然会创建失败.]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MariaDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2F2017%2F12%2F13%2Ftest%2F</url>
    <content type="text"><![CDATA[测试新的分类和标签]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux修改/etc/profile导致卡在登陆界面]]></title>
    <url>%2F2017%2F11%2F27%2Flinux%2Flinux%E4%BF%AE%E6%94%B9-etc-profile%E5%AF%BC%E8%87%B4%E5%8D%A1%E5%9C%A8%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[原博客地址:杂草丛生的博客(来自新浪博客)小白结合自己的情况和理解做些许补充.(所用系统manjaro linux). 症状:会出现类似图中所示的卡在登陆界面,不能顺利进入图形界面的情况. 起因:下午在安装某软件时需要编辑/etc/profile文件,因为”无知者无畏”(haha),造成了一些错误添加. 补救方法: 在登陆界面 ctrl+alt+f1/f2/f3…/f7 进入命令行模式,普通用户登陆. 会发现常规的命令很多不能使用(ls,vim…),这里,使用cd /etc到达系统文件夹 通过 /bin/su 命令,输入密码,获取root权限. 然后 /bin/vim profile 打开profile文件,删掉乱加的内容,保存退出. /bin/reboot 重启即可成功进入. (首次通过查阅信息解决linux出现的小问题,避免了再次装系统的麻烦,可喜可贺.)]]></content>
      <categories>
        <category>linux捣腾笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux之chattr]]></title>
    <url>%2F2017%2F05%2F29%2Flinux%2Flinux%E4%B9%8Bchattr%2F</url>
    <content type="text"><![CDATA[chattr(设置文件的隐藏属性)(+i)参数： ： 增加某一个特殊的参数，其他原本存在的参数则不动。 ： 删除某一个特殊的参数，其他原本存在的参数则不动。= ： 仅有后面接的参数。 i ：这个i可就很厉害了。它可以让一个文件“不能被删除、改名，设置连接也无法写入或添加据。” 对于系统安全性有相当大的帮助。只有root能设置此属性。 chattr +i [file/directory] ，能使file/directory无法被更动，对重要文件的保护有很大作用。简单记录下初次接触它遇到的“小坑”，即“保护“是”有限“的。 我首先创建了如下图的一个目录: 然后root执行:chattr +i TEXTrm -rf TEXTtree TEXT 得到下图：显然，“+i”这个老大哥没有保护好小弟的小弟，“1.txt 2.txt 3.txt”被删掉了。 好吧，它的能力是有限的，我的1000行py代码全没了（捂脸）。实践出真知，权当记录。 小白是跟着《鸟哥的Linux私房菜》（基础学习篇）学习的，以上摘抄书中，仅是学习记录。附上鸟哥的网站 6.10更新使用 chattr -R +i A (-R 递归地修改目录以及其下内容的属性) , 即可保护好A目录下的所有内容.设置了’i’属性的文件不能进行修改,只有超级用户可以设置或清除该属性.]]></content>
      <categories>
        <category>linux捣腾笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
